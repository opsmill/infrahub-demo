#
# Zscaler Cloud Configuration
# Device: {{ data.name }}
# Tenant: {{ data.cloud_security_service.tenant_id if data.cloud_security_service else 'Not Configured' }}
# Cloud: {{ data.cloud_security_service.cloud_region if data.cloud_security_service else 'zscaler.net' }}
# Mode: {{ data.cloud_integration_mode }}
#

# ============================================================================
# ZSCALER INTERNET ACCESS (ZIA) CONFIGURATION
# ============================================================================

{%- if data.cloud_security_service %}
[zia_config]
tenant_id = {{ data.cloud_security_service.tenant_id }}
api_base_url = {{ data.cloud_security_service.api_endpoint }}
cloud_name = {{ data.cloud_security_service.cloud_region }}
service_type = {{ data.cloud_security_service.service_type }}

# Authentication (placeholder - use secure credential management)
api_key = ${ZIA_API_KEY}
username = ${ZIA_USERNAME}
password = ${ZIA_PASSWORD}

# Zscaler Cloud Configuration
{%- if data.cloud_security_service.cloud_region == 'zscaler.net' %}
cloud_type = production
pac_file_url = http://gateway.zscaler.net/pac
{%- elif data.cloud_security_service.cloud_region == 'zscalerbeta.net' %}
cloud_type = beta
pac_file_url = http://gateway.zscalerbeta.net/pac
{%- elif data.cloud_security_service.cloud_region == 'zscalerone.net' %}
cloud_type = zscalerone
pac_file_url = http://gateway.zscalerone.net/pac
{%- elif data.cloud_security_service.cloud_region == 'zscalertwo.net' %}
cloud_type = zscalertwo
pac_file_url = http://gateway.zscalertwo.net/pac
{%- endif %}
{%- endif %}

# ============================================================================
# ZSCALER DEVICE CONFIGURATION
# ============================================================================

[device_config]
device_name = {{ data.name }}
device_type = {{ data.device_type.name }}
integration_mode = {{ data.cloud_integration_mode }}
backup_mode = {{ data.backup_mode }}
enabled = {{ data.cloud_security_enabled | lower }}

{%- if data.cloud_integration_mode == 'tunnel' %}
# IPSec Tunnel Configuration for Zscaler
[ipsec_tunnel]
tunnel_type = ipsec
authentication_method = psk
encryption_algorithm = aes-256
integrity_algorithm = sha-256
dh_group = 14
pfs_enabled = true
nat_traversal = true
dead_peer_detection = true

# Zscaler tunnel endpoints (auto-discovered based on location)
{%- if data.primary_gateway %}
primary_endpoint = {{ data.primary_gateway.endpoint_address if data.primary_gateway.endpoint_address else 'auto-discovery' }}
backup_endpoint = auto-discovery
{%- else %}
primary_endpoint = auto-discovery
backup_endpoint = auto-discovery
{%- endif %}

{%- elif data.cloud_integration_mode == 'proxy' %}
# Explicit Proxy Configuration
[proxy_config]
proxy_type = explicit
http_port = 80
https_port = 443
pac_file_enabled = true
authentication_required = true
ssl_inspection = true

{%- elif data.cloud_integration_mode == 'transparent' %}
# Transparent Proxy Configuration
[transparent_proxy]
proxy_type = transparent
wccp_enabled = true
policy_based_routing = true
ssl_inspection = true
bypass_authentication = false

{%- elif data.cloud_integration_mode == 'dns_redirect' %}
# DNS Redirect Configuration
[dns_redirect]
primary_dns = auto-discovery
secondary_dns = auto-discovery
dns_filtering = true
malware_protection = true
{%- endif %}

# ============================================================================
# ZSCALER GATEWAY CONFIGURATION
# ============================================================================

{%- if data.cloud_security_service and data.cloud_security_service.gateways %}
[gateways]
{%- for gateway in data.cloud_security_service.gateways %}
[[gateways.gateway]]
name = "{{ gateway.name }}"
type = "{{ gateway.gateway_type }}"
city = "{{ gateway.city if gateway.city else 'Unknown' }}"
country = "{{ gateway.country if gateway.country else 'Unknown' }}"
{%- if gateway.endpoint_address %}
endpoint = "{{ gateway.endpoint_address }}"
{%- endif %}
{%- if gateway.capacity_mbps %}
bandwidth_mbps = {{ gateway.capacity_mbps }}
{%- endif %}
status = "{{ gateway.status }}"
{%- if gateway.security_zone %}
security_zone = "{{ gateway.security_zone.name }}"
trust_level = {{ gateway.security_zone.trust_level if gateway.security_zone.trust_level else 50 }}
{%- endif %}

{%- endfor %}
{%- endif %}

# ============================================================================
# ZSCALER SECURITY POLICIES
# ============================================================================

{%- if data.cloud_security_service %}
{%- set policies = [] %}
{%- for policy in data.cloud_security_service.policies if data.cloud_security_service.policies %}
{%- set _ = policies.append(policy) %}
{%- endfor %}

{%- if policies %}
[security_policies]
{%- for policy in policies | sort(attribute='priority') %}

[[security_policies.policy]]
name = "{{ policy.name }}"
category = "{{ policy.policy_category }}"
enforcement_mode = "{{ policy.enforcement_mode }}"
priority = {{ policy.priority }}
enabled = {{ policy.enabled | lower }}
log_enabled = {{ policy.log_enabled | lower }}
{%- if policy.description %}
description = "{{ policy.description }}"
{%- endif %}

# Zscaler-specific policy configuration based on category
{%- if policy.policy_category == 'web_filtering' %}
# Web Filtering Policy
policy_type = "url_filtering"
{%- if policy.url_categories %}
url_categories = [
{%- for cat in policy.url_categories %}
  "{{ cat.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}
ssl_scan_enabled = true
safe_search_enforcement = true
youtube_restrictions = "moderate"

{%- elif policy.policy_category == 'app_control' %}
# Application Control Policy
policy_type = "application_control"
{%- if policy.applications %}
applications = [
{%- for app in policy.applications %}
  {
    name = "{{ app.name }}"
    category = "{{ app.category if app.category else 'unknown' }}"
    risk_level = {{ app.risk_level if app.risk_level else 1 }}
    action = "{{ 'block' if policy.enforcement_mode == 'enforce' else 'monitor' }}"
  }{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

{%- elif policy.policy_category == 'threat_prevention' %}
# Threat Prevention Policy
policy_type = "security_policy"
antivirus_enabled = true
ips_enabled = true
sandbox_enabled = true
dns_security = true

{%- elif policy.policy_category == 'ssl_inspection' %}
# SSL Inspection Policy
policy_type = "ssl_inspection"
ssl_inspection_enabled = true
certificate_validation = true
decrypt_all_traffic = false
{%- if policy.url_categories %}
ssl_categories = [
{%- for cat in policy.url_categories %}
  "{{ cat.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

{%- elif policy.policy_category == 'data_protection' %}
# Data Loss Prevention Policy
policy_type = "dlp_policy"
dlp_enabled = true
file_type_controls = true
{%- if policy.applications %}
monitored_applications = [
{%- for app in policy.applications %}
  "{{ app.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

{%- else %}
# Access Control Policy
policy_type = "firewall_rule"
default_action = "{{ 'allow' if policy.enforcement_mode == 'monitor' else 'block' }}"
{%- endif %}

# Source Configuration
{%- if policy.source_zones %}
source_zones = [
{%- for zone in policy.source_zones %}
  "{{ zone.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

{%- if policy.source_addresses %}
source_addresses = [
{%- for addr in policy.source_addresses %}
  "{{ addr.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

{%- if policy.source_gateways %}
source_locations = [
{%- for gw in policy.source_gateways %}
  "{{ gw.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

# Destination Configuration
{%- if policy.destination_zones %}
destination_zones = [
{%- for zone in policy.destination_zones %}
  "{{ zone.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

{%- if policy.destination_addresses %}
destination_addresses = [
{%- for addr in policy.destination_addresses %}
  "{{ addr.name }}"{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

# Services Configuration
{%- if policy.services %}
services = [
{%- for service in policy.services %}
  {
    name = "{{ service.name }}"
    port = "{{ service.port if service.port else 'any' }}"
    protocol = "{{ service.protocol }}"
  }{{ "," if not loop.last }}
{%- endfor %}
]
{%- endif %}

# Schedule Configuration
{%- if policy.schedule %}
schedule = {
  name = "{{ policy.schedule.name }}"
  days_of_week = "{{ policy.schedule.days_of_week }}"
  start_time = "{{ policy.schedule.start_time }}"
  end_time = "{{ policy.schedule.end_time }}"
  timezone = "{{ policy.schedule.timezone }}"
}
{%- endif %}

{%- endfor %}
{%- endif %}
{%- endif %}

# ============================================================================
# ZSCALER MONITORING AND LOGGING
# ============================================================================

[monitoring]
health_check_enabled = true
health_check_interval = 30
gateway_status_monitoring = true
policy_compliance_check = true
bandwidth_monitoring = true
user_activity_monitoring = true

[logging]
log_level = "info"
syslog_enabled = true
api_logging = true
user_activity_logs = true
security_event_logs = true
web_transaction_logs = true

# Zscaler-specific log destinations
log_destinations = [
  "zscaler_cloud",
  "local_syslog",
  "api_webhook"
]

# NSS (Nanolog Streaming Service) Configuration
nss_enabled = true
nss_feeds = [
  "web",
  "firewall",
  "dns",
  "tunnel"
]

# ============================================================================
# ZSCALER API CONFIGURATION
# ============================================================================

[api_config]
# Rate limiting to respect Zscaler API limits
rate_limit_enabled = true
requests_per_hour = 10000
concurrent_sessions = 10

# API endpoints for different operations
endpoints = {
  activation = "/api/v1/status/activate"
  locations = "/api/v1/locations"
  users = "/api/v1/users"
  groups = "/api/v1/groups"
  url_categories = "/api/v1/urlCategories"
  url_filtering_rules = "/api/v1/urlFilteringRules"
  firewall_rules = "/api/v1/firewallFilteringRules"
  sandbox_report = "/api/v1/sandbox/report"
}

# Retry configuration for API calls
retry_enabled = true
max_retries = 3
retry_delay = 5

# ============================================================================
# END OF ZSCALER CONFIGURATION
# ============================================================================