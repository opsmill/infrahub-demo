{
  "DEVICE_METADATA": {
    "localhost": {
      "hostname": "{{ data.name }}",
      "type": "SpineRouter",
{%- set local_asn = None %}
{%- for service in data.device_service %}
  {%- if service.typename == "ServiceBGP" and service.local_as %}
    {%- set local_asn = service.local_as.asn %}
  {%- endif %}
{%- endfor %}
      "bgp_asn": "{{ local_asn if local_asn else '65000' }}"
    }
  },
  "LOOPBACK_INTERFACE": {
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimVirtualInterface" and "loopback" in interface.name.lower() %}
    {%- for ip in interface.ip_addresses %}
    "{{ interface.name }}|{{ ip.address }}": {}{{ "," if not loop.last }}
    {%- endfor %}
  {%- endif %}
{%- endfor %}
  },
  "INTERFACE": {
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimPhysicalInterface" and interface.role in ["ospf-unnumbered", "core"] %}
    {%- if interface.ip_addresses %}
      {%- for ip in interface.ip_addresses %}
    "{{ interface.name }}|{{ ip.address }}": {}{{ "," if not loop.last }}
      {%- endfor %}
    {%- else %}
    "{{ interface.name }}": {}{{ "," if not loop.last }}
    {%- endif %}
  {%- endif %}
{%- endfor %}
  },
{%- set ns = namespace(router_id=None, bgp_sessions=[], ospf_sessions=[], is_ebgp_underlay=false, is_ospf_underlay=false, evpn_sessions=[]) %}

{%- for service in data.device_service %}
  {%- if service.typename == "ServiceBGP" %}
    {%- set ns.bgp_sessions = ns.bgp_sessions + [service] %}
    {%- if service.session_type == "EXTERNAL" %}
      {%- set ns.is_ebgp_underlay = true %}
    {%- elif service.session_type == "EVPN" %}
      {%- set ns.evpn_sessions = ns.evpn_sessions + [service] %}
    {%- endif %}
    {%- if not ns.router_id and service.router_id %}
      {%- set ns.router_id = service.router_id.address %}
    {%- endif %}
  {%- elif service.typename == "ServiceOSPF" %}
    {%- set ns.ospf_sessions = ns.ospf_sessions + [service] %}
    {%- set ns.is_ospf_underlay = true %}
    {%- if not ns.router_id and service.router_id %}
      {%- set ns.router_id = service.router_id.address %}
    {%- endif %}
  {%- endif %}
{%- endfor %}
  "BGP_NEIGHBOR": {
{%- for service in ns.bgp_sessions %}
  {%- if service.remote_ip %}
    "{{ service.remote_ip.address.split('/')[0] }}": {
      "local_addr": "{{ service.local_ip.address.split('/')[0] if service.local_ip else ns.router_id.split('/')[0] }}",
      "asn": "{{ service.remote_as.asn }}",
      "holdtime": "10",
      "keepalive": "3"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
  "BGP_GLOBALS": {
    "default": {
      "router_id": "{{ ns.router_id.split('/')[0] if ns.router_id else '1.1.1.1' }}",
      "local_asn": "{{ local_asn if local_asn else '65000' }}"
    }
  },
{%- if ns.is_ospf_underlay %}
  "OSPF_ROUTER": {
    "default": {
      "router_id": "{{ ns.router_id.split('/')[0] if ns.router_id else '1.1.1.1' }}"
    }
  },
  "OSPF_INTERFACE": {
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimPhysicalInterface" and interface.role == "ospf-unnumbered" %}
    "{{ interface.name }}": {
      "area": "0.0.0.0",
      "network": "point-to-point"
    }{{ "," if not loop.last }}
  {%- elif interface.typename == "DcimVirtualInterface" and "loopback" in interface.name.lower() and interface.role == "loopback" %}
    "{{ interface.name }}": {
      "area": "0.0.0.0"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
{%- endif %}
  "BGP_PEER_GROUP": {
    "UNDERLAY": {
      "asn": "{{ local_asn if local_asn else '65000' }}"
    },
    "EVPN_OVERLAY": {
      "asn": "{{ local_asn if local_asn else '65000' }}"
    }
  },
  "BGP_NEIGHBOR_AF": {
{%- for service in ns.bgp_sessions %}
  {%- if service.remote_ip %}
    "{{ service.remote_ip.address.split('/')[0] }}|ipv4_unicast": {
      "admin_status": "up"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
{%- if evpn_sessions %}
  {%- for service in evpn_sessions %}
    {%- if service.remote_ip %}
    "{{ service.remote_ip.address.split('/')[0] }}|l2vpn_evpn": {
      "admin_status": "up",
      "route_reflector_client": "true"
    }{{ "," if not loop.last }}
    {%- endif %}
  {%- endfor %}
{%- endif %}
  }
}
