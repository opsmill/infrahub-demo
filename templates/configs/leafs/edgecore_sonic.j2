{
  "DEVICE_METADATA": {
    "localhost": {
      "hostname": "{{ data.name }}",
      "type": "{{ data.dynamic_config.device_role | title }}Router",
      "bgp_asn": "{{ data.local_asn }}"
    }
  },
  "LOOPBACK_INTERFACE": {
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimVirtualInterface" and "loopback" in interface.name.lower() %}
    {%- for ip in interface.ip_addresses %}
    "{{ interface.name }}|{{ ip.address }}": {}{{ "," if not loop.last }}
    {%- endfor %}
  {%- endif %}
{%- endfor %}
  },
  "INTERFACE": {
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimPhysicalInterface" and interface.role == "ospf-unnumbered" %}
    "{{ interface.name }}": {}{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
{# Use fabric segments from enhanced transform #}
{%- set vlan_services = data.fabric.vxlan_service.segments or [] %}
{%- if vlan_services | length > 0 %}
 "VLAN": {
{%- for segment in vlan_services %}
   "Vlan{{ segment.vlan_id }}": {
     "vlanid": "{{ segment.vlan_id }}",
     "description": "L2 segment for {{ segment.name }}"
   }{{ "," if not loop.last }}
{%- endfor %}{% for vrf_name, vrf in data.vrfs.items() %},
   "Vlan{{ vrf.l3vni }}": {
     "vlanid": "{{ vrf.l3vni }}",
     "description": "L3VNI for {{ vrf_name }}"
   }{{ "," if not loop.last }}
{%- endfor %}
 },
  "VLAN_INTERFACE": {
{%- for segment in vlan_services %}
  {%- set segment_vrf = None %}
  {%- for vrf_name, vrf in data.vrfs.items() %}
    {%- if segment.customer.name == vrf.customer %}
      {%- set segment_vrf = vrf %}
    {%- endif %}
  {%- endfor %}
    "Vlan{{ segment.vlan_id }}": {
      "vrf_name": "{{ segment_vrf.name if segment_vrf else segment.customer.name + '_VRF' }}"
    }{{ "," if not loop.last }}
{%- endfor %}{% for vrf_name, vrf in data.vrfs.items() %},
    "Vlan{{ vrf.l3vni }}": {
      "vrf_name": "{{ vrf_name }}"
    }{{ "," if not loop.last }}
{%- endfor %}
  },
  "VRF": {
{%- for vrf_name, vrf in data.vrfs.items() %}
    "{{ vrf_name }}": {
      "vni": "{{ vrf.l3vni }}"
    }{{ "," if not loop.last }}
{%- endfor %}
  },
  "VXLAN_TUNNEL": {
    "vtep1": {
      "src_ip": "{{ data.vtep_source_ip }}"
    }
  },
  "VXLAN_TUNNEL_MAP": {
{%- for segment in vlan_services %}
    "vtep1|map_{{ segment.vni }}_Vlan{{ segment.vlan_id }}": {
      "vlan": "Vlan{{ segment.vlan_id }}",
      "vni": "{{ segment.vni }}"
    }{{ "," if not loop.last }}
{%- endfor %}{% for vrf_name, vrf in data.vrfs.items() %},
    "vtep1|map_{{ vrf.l3vni }}_Vlan{{ vrf.l3vni }}": {
      "vlan": "Vlan{{ vrf.l3vni }}",
      "vni": "{{ vrf.l3vni }}"
    }{{ "," if not loop.last }}
{%- endfor %}
  },
{%- else %}
  "VRF": {
    "default_tenant_VRF": {
      "vni": "{{ data.dynamic_config.default_tenant_vni }}"
    }
  },
{%- endif %}
{# Use enhanced data structures from transforms #}
{%- set bgp_sessions = data.bgp_services or [] %}
{%- set router_id = data.loopback0_ip %}
{%- set underlay_strategy = data.underlay_strategy %}
{%- set is_ospf_underlay = underlay_strategy in ['ospf-ibgp'] %}

  "BGP_NEIGHBOR": {
{%- for bgp_service in bgp_sessions %}
    "{{ bgp_service.remote_ip.split('/')[0] }}": {
      "local_addr": "{{ router_id }}",
      "asn": "{{ bgp_service.remote_as }}",
      "holdtime": "10",
      "keepalive": "3",
      "name": "{{ bgp_service.description }}"
    }{{ "," if not loop.last }}
{%- endfor %}
  },
  "BGP_GLOBALS": {
    "default": {
      "router_id": "{{ router_id }}",
      "local_asn": "{{ data.local_asn }}"
    }
  },
{%- if is_ospf_underlay %}
  "OSPF_ROUTER": {
    "default": {
      "router_id": "{{ router_id }}"
    }
  },
  "OSPF_INTERFACE": {
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimPhysicalInterface" and interface.role == "ospf-unnumbered" %}
    "{{ interface.name }}": {
      "area": "{{ data.ospf_area or '0.0.0.0' }}",
      "network": "point-to-point"
    }{{ "," if not loop.last }}
  {%- elif interface.typename == "DcimVirtualInterface" and "loopback" in interface.name.lower() and interface.role == "loopback" %}
    "{{ interface.name }}": {
      "area": "{{ data.ospf_area or '0.0.0.0' }}"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
{%- endif %}
  "BGP_PEER_GROUP": {
    "UNDERLAY": {
      "asn": "{{ data.local_asn }}"
    },
    "EVPN_OVERLAY": {
      "asn": "{{ data.local_asn }}"
    }
  },
  "BGP_NEIGHBOR_AF": {
{%- for bgp_service in bgp_sessions %}
  {%- if bgp_service.session_type == "EXTERNAL" %}
    "{{ bgp_service.remote_ip.split('/')[0] }}|ipv4_unicast": {
      "admin_status": "up"
    }{{ "," if not loop.last }}
  {%- elif bgp_service.session_type == "INTERNAL" %}
    "{{ bgp_service.remote_ip.split('/')[0] }}|l2vpn_evpn": {
      "admin_status": "up"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  }{% if vlan_services | length > 0 %},
  "ACL_TABLE": {
{%- for service in vlan_services %}
  {%- if service.access_control_lists %}
    {%- for acl in service.access_control_lists %}
    "{{ acl.name }}": {
      "type": "L3",
      "stage": "{% if 'INGRESS' in acl.name %}ingress{% else %}egress{% endif %}",
      "ports": ["Vlan{{ service.vni }}"]
    }{{ "," if not (loop.last and loop.outer.last) }}
    {%- endfor %}
  {%- endif %}
{%- endfor %}
  },
  "ACL_RULE": {
{%- for service in vlan_services %}
  {%- if service.access_control_lists %}
    {%- for acl in service.access_control_lists %}
      {%- if acl.rules %}
        {%- for rule in acl.rules %}
    "{{ acl.name }}|RULE_{{ rule.index }}": {
      "PRIORITY": "{{ 1000 - rule.index }}",
      "PACKET_ACTION": "{% if rule.action == 'permit' %}ACCEPT{% else %}DROP{% endif %}",
      {%- if rule.source_addresses %}
      "SRC_IP": "{{ rule.source_addresses[0].name if rule.source_addresses[0].name else 'any' }}",
      {%- endif %}
      {%- if rule.destination_addresses %}
      "DST_IP": "{{ rule.destination_addresses[0].name if rule.destination_addresses[0].name else 'any' }}",
      {%- endif %}
      {%- if rule.services %}
      "L4_DST_PORT": "{{ rule.services[0].name }}",
      {%- endif %}
      "IP_PROTOCOL": "{% if rule.services and 'tcp' in rule.services[0].name.lower() %}6{% elif rule.services and 'udp' in rule.services[0].name.lower() %}17{% else %}255{% endif %}"
    }{{ "," if not (loop.last and loop.outer.last and loop.outermost.last) }}
        {%- endfor %}
      {%- endif %}
    {%- endfor %}
  {%- endif %}
{%- endfor %}
  },
  "DHCP_SNOOPING": {
{%- for service in vlan_services %}
  {%- if service.security_profile and service.security_profile.enable_dhcp_snooping %}
    "{{ service.name }}": {
      "state": "enabled",
      "vlan": "Vlan{{ service.vni }}"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
  "ARP_INSPECTION": {
{%- for service in vlan_services %}
  {%- if service.security_profile and service.security_profile.enable_arp_inspection %}
    "{{ service.name }}": {
      "state": "enabled",
      "vlan": "Vlan{{ service.vni }}"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
  "STORM_CONTROL": {
{%- for service in vlan_services %}
  {%- if service.security_profile and service.security_profile.max_mac_addresses %}
    "{{ service.name }}": {
      "broadcast_rate": "100",
      "multicast_rate": "100",
      "unknown_unicast_rate": "100",
      "interface": "Vlan{{ service.vni }}"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  },
  "LOGGING": {
{%- for service in vlan_services %}
  {%- if service.enable_logging %}
    "{{ service.name }}_LOG": {
      "facility": "local0",
      "level": "info",
      "remote_host": "10.0.1.100"
    }{{ "," if not loop.last }}
  {%- endif %}
{%- endfor %}
  }{% endif %}
  },
  "VXLAN_EVPN_NVO": {
    "nvo1": {
      "source_vtep": "vtep1"
    }
  }
}
