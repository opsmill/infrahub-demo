!
! Arista EOS VXLAN/EVPN Leaf Configuration with Security
! Device: {{ data.name }}
! Generated for {{ data.device_type.manufacturer.name }} {{ data.device_type.platform.netmiko_device_type }}
!

hostname {{ data.name }}

! Configure spanning tree mode
spanning-tree mode mstp

! Configure VLAN 1
no spanning-tree vlan-id 4094

{%- set bgp_sessions = [] %}
{%- set ospf_sessions = [] %}
{%- set router_id = None %}
{%- set local_asn = None %}
{%- set is_ebgp_underlay = false %}
{%- set is_ospf_underlay = false %}

{%- for service in data.device_service %}
  {%- if service.typename == "ServiceBGP" %}
    {%- set bgp_sessions = bgp_sessions + [service] %}
    {%- if service.session_type == "EXTERNAL" %}
      {%- set is_ebgp_underlay = true %}
    {%- endif %}
    {%- if not local_asn and service.local_as %}
      {%- set local_asn = service.local_as.asn %}
    {%- endif %}
    {%- if not router_id and service.router_id %}
      {%- set router_id = service.router_id.address %}
    {%- endif %}
  {%- elif service.typename == "ServiceOSPF" %}
    {%- set ospf_sessions = ospf_sessions + [service] %}
    {%- set is_ospf_underlay = true %}
    {%- if not router_id and service.router_id %}
      {%- set router_id = service.router_id.address %}
    {%- endif %}
  {%- endif %}
{%- endfor %}

! Configure VRFs for tenant traffic
{%- for vrf in data.customer_vrfs %}
vrf instance {{ vrf.name }}

{%- endfor %}

! Configure loopback interfaces
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimVirtualInterface" and "loopback" in interface.name.lower() %}
interface {{ interface.name }}
   description {{ interface.description if interface.description else "Router ID / VTEP IP" }}
    {%- for ip in interface.ip_addresses %}
   ip address {{ ip.address }}
    {%- endfor %}
    {%- if is_ospf_underlay and interface.role == "loopback" %}
   ospf area {{ data.dynamic_config.ospf_area }}
    {%- endif %}

  {%- endif %}
{%- endfor %}

{%- if is_ospf_underlay %}
! Configure OSPF
router ospf 1
   {%- for service in ospf_sessions %}
     {%- if service.router_id %}
   router-id {{ service.router_id.address.split('/')[0] }}
     {%- endif %}
   {%- endfor %}
   passive-interface default
   no passive-interface Ethernet1
   no passive-interface Ethernet2
   max-lsa 12000

{%- endif %}

! Configure underlay interfaces
{%- for interface in data.interfaces %}
  {%- if interface.typename == "DcimPhysicalInterface" and interface.role in ["ospf-unnumbered", "core"] %}
interface {{ interface.name }}
   description {{ interface.description if interface.description else "Underlay connection" }}
   mtu 9214
   no switchport
    {%- if interface.role == "ospf-unnumbered" %}
   ip unnumbered Loopback0
      {%- if is_ospf_underlay %}
   ospf area {{ data.dynamic_config.ospf_area }}
   ospf network point-to-point
      {%- endif %}
    {%- elif interface.role == "core" and interface.ip_addresses %}
      {%- for ip in interface.ip_addresses %}
   ip address {{ ip.address }}
      {%- endfor %}
    {%- endif %}

  {%- endif %}
{%- endfor %}

! Configure VXLAN interface
interface Vxlan1
   description VXLAN Tunnel Interface
   vxlan source-interface Loopback1
   vxlan udp-port 4789

{%- set vlan_services = data.network_segments or [] %}

{%- if vlan_services %}
{%- for service in vlan_services %}
   vxlan vlan {{ service.vni }} vni {{ service.vni }}
{%- endfor %}
{%- for vrf in data.customer_vrfs %}
   vxlan vrf {{ vrf.name }} vni {{ vrf.vni }}
{%- endfor %}

! Configure VLANs
{%- for service in vlan_services %}
vlan {{ service.vni }}
   name {{ service.name }}{% if service.security_zone %} - Security Zone: {{ service.security_zone.name }}{% endif %}

{%- endfor %}

! Configure VLAN interfaces
{%- for service in vlan_services %}
  {%- set service_vrf = None %}
  {%- for vrf in data.customer_vrfs %}
    {%- for segment in vrf.segments %}
      {%- if segment.name == service.name %}
        {%- set service_vrf = vrf %}
      {%- endif %}
    {%- endfor %}
  {%- endfor %}
interface Vlan{{ service.vni }}
   description {{ service.description if service.description else service.name }}
   vrf {{ service_vrf.name if service_vrf else (service.name | replace(' ', '_') | replace('-', '_')) + '_VRF' }}
   {%- for prefix in service.prefixes %}
   ip address virtual {{ prefix.prefix.split('/')[0] }}/{{ prefix.prefix.split('/')[1] }}
   {%- endfor %}

{%- endfor %}

interface Vlan4094
   description MLAG Peer Link
   no autostate
   ip address {{ data.dynamic_config.mlag_peer_ip | default("169.254.254.1/30") }}

{%- endif %}

! Configure BGP
router bgp {{ local_asn }}
   router-id {{ router_id.split('/')[0] if router_id else data.dynamic_config.router_id }}
   no bgp default ipv4-unicast
   distance bgp 20 200 200
   maximum-paths 4 ecmp 64
   bgp listen range {{ data.dynamic_config.bgp_listen_range | default("10.0.0.0/8") }} peer-group EVPN-OVERLAY-PEERS remote-as {{ local_asn }}

{%- for service in bgp_sessions %}
  {%- if service.session_type == "EXTERNAL" %}
   ! eBGP Underlay neighbor {{ service.remote_as.asn }}
   neighbor {{ service.remote_ip.address.split('/')[0] if service.remote_ip else service.name }} remote-as {{ service.remote_as.asn }}
    {%- if service.local_ip %}
   neighbor {{ service.remote_ip.address.split('/')[0] }} update-source {{ service.local_ip.address.split('/')[0] }}
    {%- else %}
   neighbor {{ service.remote_ip.address.split('/')[0] }} update-source Loopback0
    {%- endif %}
   neighbor {{ service.remote_ip.address.split('/')[0] }} bfd
   neighbor {{ service.remote_ip.address.split('/')[0] }} password 7 <encrypted>
  {%- elif service.session_type == "INTERNAL" and "evpn" in service.name.lower() %}
   ! iBGP EVPN neighbor
   neighbor {{ service.remote_ip.address.split('/')[0] }} peer group EVPN-OVERLAY-PEERS
   neighbor {{ service.remote_ip.address.split('/')[0] }} remote-as {{ service.remote_as.asn }}
   neighbor {{ service.remote_ip.address.split('/')[0] }} update-source Loopback0
   neighbor {{ service.remote_ip.address.split('/')[0] }} bfd
  {%- elif service.session_type == "INTERNAL" %}
   ! iBGP neighbor
   neighbor {{ service.remote_ip.address.split('/')[0] }} remote-as {{ service.remote_as.asn }}
   neighbor {{ service.remote_ip.address.split('/')[0] }} update-source Loopback0
   neighbor {{ service.remote_ip.address.split('/')[0] }} bfd
  {%- endif %}
{%- endfor %}

   peer-group EVPN-OVERLAY-PEERS update-source Loopback0
   peer-group EVPN-OVERLAY-PEERS bfd
   peer-group EVPN-OVERLAY-PEERS ebgp-multihop 3
   peer-group EVPN-OVERLAY-PEERS password 7 <encrypted>
   peer-group EVPN-OVERLAY-PEERS send-community
   peer-group EVPN-OVERLAY-PEERS maximum-routes 0

   address-family ipv4
      redistribute connected route-map RM-CONN-2-BGP
{%- for service in bgp_sessions %}
  {%- if service.session_type == "EXTERNAL" %}
      neighbor {{ service.remote_ip.address.split('/')[0] if service.remote_ip else service.name }} activate
  {%- elif service.session_type == "INTERNAL" and "evpn" not in service.name.lower() %}
      neighbor {{ service.remote_ip.address.split('/')[0] }} activate
  {%- endif %}
{%- endfor %}

   address-family evpn
      peer-group EVPN-OVERLAY-PEERS activate

{%- if vlan_services %}
{%- for vrf in data.customer_vrfs %}
   vrf {{ vrf.name }}
      rd {{ router_id.split('/')[0] if router_id else data.dynamic_config.router_id }}:{{ vrf.vni }}
      route-target import evpn {{ vrf.vni }}:{{ vrf.vni }}
      route-target export evpn {{ vrf.vni }}:{{ vrf.vni }}
      redistribute connected

{%- endfor %}

{%- for service in vlan_services %}
   vlan {{ service.vni }}
      rd {{ router_id.split('/')[0] if router_id else data.dynamic_config.router_id }}:{{ service.vni }}
      route-target both {{ service.vni }}:{{ service.vni }}
      redistribute learned

{%- endfor %}
{%- endif %}

! Configure route-maps
route-map RM-CONN-2-BGP permit 10
   match interface Loopback0
route-map RM-CONN-2-BGP permit 20
   match interface Loopback1

{%- if vlan_services | length > 0 %}

! Security Configuration
{%- for service in vlan_services %}

! Security configuration for {{ service.name }}
{%- if service.security_zone %}
! Security Zone: {{ service.security_zone.name }} (Trust Level: {{ service.security_zone.trust_level }})
{%- endif %}

{%- if service.access_control_lists %}
{%- for acl in service.access_control_lists %}
! ACL: {{ acl.name }} - {{ acl.description if acl.description else "Standard ACL" }}
ip access-list extended {{ acl.name }}
{%- if acl.rules %}
{%- for rule in acl.rules %}
 {{ rule.index }} {{ rule.action }} {% if rule.services %}{% for svc in rule.services %}{{ svc.name }}{% if not loop.last %} {% endif %}{% endfor %}{% else %}ip{% endif %} {% if rule.source_addresses %}{% for addr in rule.source_addresses %}{{ addr.name }}{% if not loop.last %} {% endif %}{% endfor %}{% else %}any{% endif %} {% if rule.destination_addresses %}{% for addr in rule.destination_addresses %}{{ addr.name }}{% if not loop.last %} {% endif %}{% endfor %}{% else %}any{% endif %}{% if rule.log %} log{% endif %}
{%- endfor %}
{%- endif %}

{%- endfor %}

! Apply ACLs to VLAN interface
interface Vlan{{ service.vni }}
{%- for acl in service.access_control_lists %}
   ip access-group {{ acl.name }} {% if 'INGRESS' in acl.name %}in{% else %}out{% endif %}
{%- endfor %}

{%- endif %}

{%- if service.security_profile %}
! Security Profile: {{ service.security_profile.name }}
{%- if service.security_profile.enable_dhcp_snooping %}
! Enable DHCP Snooping
ip dhcp snooping
ip dhcp snooping vlan {{ service.vni }}
{%- endif %}

{%- if service.security_profile.enable_arp_inspection %}
! Enable ARP Inspection
ip arp inspection vlan {{ service.vni }}
{%- endif %}

{%- if service.security_profile.max_mac_addresses %}
! Port Security
interface Vlan{{ service.vni }}
   switchport port-security maximum {{ service.security_profile.max_mac_addresses }}
   switchport port-security
{%- endif %}

{%- endif %}

{%- if service.enable_logging %}
! Security Logging
logging host {{ data.dynamic_config.syslog_server | default("10.0.1.100") }}
logging facility local0
logging level informational
{%- endif %}

{%- endfor %}
{%- endif %}

! End of configuration
